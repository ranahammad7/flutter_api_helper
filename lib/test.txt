

## README.md
```markdown
# Flutter API Helper

A powerful, easy-to-use API helper for Flutter that handles everything from simple GET requests to complex error handling, caching, and token management.

## Features

- ✅ Simple and intuitive API
- ✅ Automatic retry with exponential backoff
- ✅ Built-in caching (memory + disk)
- ✅ Token management and automatic refresh
- ✅ File upload/download with progress tracking
- ✅ Network connectivity checking
- ✅ Comprehensive error handling
- ✅ Request/response interceptors
- ✅ Flutter widget integration
- ✅ Highly customizable
- ✅ TypeScript-like generic support

## Installation

Add this to your `pubspec.yaml`:

```yaml
dependencies:
  flutter_api_helper: ^1.0.0
```

Then run:

```bash
flutter pub get
```

## Quick Start

### 1. Configure the API Helper

```dart
import 'package:flutter_api_helper/flutter_api_helper.dart';

void main() {
  // Configure API Helper globally
  ApiHelper.configure(
    ApiConfig(
      baseUrl: 'https://api.yourapp.com',
      enableLogging: true,
      timeout: Duration(seconds: 30),
      defaultHeaders: {
        'Content-Type': 'application/json',
      },
    ),
  );
  
  runApp(MyApp());
}
```

### 2. Make API Calls

```dart
// GET request
final users = await ApiHelper.get<List<dynamic>>('/users');

// POST request
final newUser = await ApiHelper.post('/users', data: {
  'name': 'John Doe',
  'email': 'john@example.com',
});

// PUT request
final updatedUser = await ApiHelper.put('/users/1', data: {
  'name': 'Jane Doe',
});

// DELETE request
await ApiHelper.delete('/users/1');
```

### 3. Use with Flutter Widgets

```dart
class UsersList extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ApiBuilder<List<dynamic>>(
      future: ApiHelper.get('/users'),
      builder: (users) => ListView.builder(
        itemCount: users.length,
        itemBuilder: (context, index) {
          final user = users[index];
          return ListTile(
            title: Text(user['name']),
            subtitle: Text(user['email']),
          );
        },
      ),
      loading: CircularProgressIndicator(),
      error: (error) => Text('Error: ${error.message}'),
      empty: Text('No users found'),
    );
  }
}
```

## Advanced Usage

### Caching

```dart
// Cache response for 10 minutes
final posts = await ApiHelper.get(
  '/posts',
  cache: CacheConfig(duration: Duration(minutes: 10)),
);

// Clear cache
await ApiHelper.clearCache();
await ApiHelper.clearCacheForUrl('/posts');
```

### Retry Configuration

```dart
final data = await ApiHelper.get(
  '/unstable-endpoint',
  retry: RetryConfig(
    maxRetries: 5,
    retryDelay: Duration(seconds: 2),
    useExponentialBackoff: true,
  ),
);
```

### Token Management

```dart
ApiHelper.configure(
  ApiConfig(
    baseUrl: 'https://api.yourapp.com',
    getToken: () async {
      // Return current token
      return await TokenStorage.getToken();
    },
    onTokenExpired: () async {
      // Refresh token when expired
      await AuthService.refreshToken();
    },
  ),
);
```

### File Upload

```dart
final file = File('/path/to/file.jpg');
final response = await ApiHelper.uploadFile(
  '/upload',
  file,
  fieldName: 'image',
  fields: {'description': 'Profile picture'},
  onProgress: (sent, total) {
    print('Upload progress: ${(sent / total * 100).round()}%');
  },
);
```

### File Download

```dart
await ApiHelper.downloadFile(
  '/files/document.pdf',
  '/local/path/document.pdf',
  onProgress: (received, total) {
    print('Download progress: ${(received / total * 100).round()}%');
  },
);
```

### Error Handling

```dart
try {
  final data = await ApiHelper.get('/api/data');
} catch (e) {
  if (e is ApiError) {
    switch (e.type) {
      case ApiErrorType.network:
        print('Network error: ${e.message}');
        break;
      case ApiErrorType.server:
        print('Server error: ${e.message}');
        break;
      case ApiErrorType.timeout:
        print('Request timeout: ${e.message}');
        break;
      default:
        print('Unknown error: ${e.message}');
    }
  }
}
```

### Custom Interceptors

```dart
class AuthInterceptor extends ApiInterceptor {
  @override
  Future<void> onRequest(
    String method,
    String url,
    Map<String, String>? headers,
    dynamic data,
  ) async {
    headers?['Authorization'] = 'Bearer ${await getToken()}';
  }

  @override
  Future<void> onResponse(http.Response response) async {
    if (response.statusCode == 401) {
      await refreshToken();
    }
  }
}

// Add interceptor
ApiHelper.instance.addInterceptor(AuthInterceptor());
```

## Configuration Options

### ApiConfig

```dart
ApiConfig(
  baseUrl: 'https://api.example.com',           // Base URL for all requests
  defaultHeaders: {'Accept': 'application/json'}, // Default headers
  timeout: Duration(seconds: 30),               // Request timeout
  enableLogging: true,                          // Enable request logging
  getToken: () async => 'your-token',          // Token getter function
  onTokenExpired: () async => refreshToken(),   // Token refresh callback
  onError: (error) => handleError(error),      // Global error handler
  retryConfig: RetryConfig(...),               // Default retry config
  cacheConfig: CacheConfig(...),               // Default cache config
)
```

### CacheConfig

```dart
CacheConfig(
  duration: Duration(minutes: 5),     // Cache duration
  keyPrefix: 'myapp_',               // Cache key prefix
  useMemoryCache: true,              // Enable memory cache
  useDiskCache: true,                // Enable disk cache
  maxCacheSize: 10 * 1024 * 1024,   // Max cache size (10MB)
)
```

### RetryConfig

```dart
RetryConfig(
  maxRetries: 3,                              // Max retry attempts
  retryDelay: Duration(seconds: 1),           // Initial retry delay
  useExponentialBackoff: true,                // Use exponential backoff
  maxRetryDelay: Duration(seconds: 30),       // Maximum retry delay
  retryStatusCodes: [408, 429, 500, 502, 503, 504], // Retryable status codes
)
```

## Error Types

- `ApiErrorType.network` - Network connectivity issues
- `ApiErrorType.timeout` - Request timeout
- `ApiErrorType.server` - Server errors (5xx)
- `ApiErrorType.client` - Client errors (4xx)
- `ApiErrorType.authentication` - Authentication errors
- `ApiErrorType.parsing` - JSON parsing errors
- `ApiErrorType.unknown` - Unknown errors

## Testing

```dart
// Mock API responses for testing
void main() {
  group('API Tests', () {
    test('should fetch users successfully', () async {
      // Your test code here
    });
  });
}
```

## Contributing

Contributions are welcome! Please read our contributing guidelines and submit pull requests to our repository.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
```

## CHANGELOG.md
```markdown
# Changelog

All notable changes to this project will be documented in this file.

## [1.0.0] - 2024-01-20

### Added
- Initial release
- Basic HTTP methods (GET, POST, PUT, PATCH, DELETE)
- Automatic retry with exponential backoff
- Built-in caching (memory + disk)
- Token management and automatic refresh
- File upload/download with progress tracking
- Network connectivity checking
- Comprehensive error handling
- Request/response interceptors
- Flutter widget integration (ApiBuilder)
- Type-safe generic support
- Extensive documentation and examples

### Features
- ✅ Simple and intuitive API
- ✅ Highly customizable configuration
- ✅ Production-ready error handling
- ✅ Built-in logging interceptor
- ✅ Cache management utilities
- ✅ Network-aware operations
- ✅ Progress tracking for uploads/downloads
- ✅ Comprehensive test coverage
```